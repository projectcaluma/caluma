# serializer version: 1
# name: test_init_of_calc_questions_queries
  list([
    dict({
      'sql': 'SELECT "caluma_form_answer"."created_at", "caluma_form_answer"."modified_at", "caluma_form_answer"."created_by_user", "caluma_form_answer"."created_by_group", "caluma_form_answer"."modified_by_user", "caluma_form_answer"."modified_by_group", "caluma_form_answer"."id", "caluma_form_answer"."question_id", "caluma_form_answer"."value", "caluma_form_answer"."meta", "caluma_form_answer"."document_id", "caluma_form_answer"."date" FROM "caluma_form_answer" WHERE ("caluma_form_answer"."document_id" = \'9df16143c288452b8b6435ebe3be969f\'::uuid AND "caluma_form_answer"."question_id" = \'top_question\') ORDER BY "caluma_form_answer"."id" ASC LIMIT 1',
      'time': '0.000',
    }),
    dict({
      'sql': 'SAVEPOINT "s138278537434944_x63"',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_question"."created_at", "caluma_form_question"."modified_at", "caluma_form_question"."created_by_user", "caluma_form_question"."created_by_group", "caluma_form_question"."modified_by_user", "caluma_form_question"."modified_by_group", "caluma_form_question"."slug", "caluma_form_question"."label", "caluma_form_question"."type", "caluma_form_question"."is_required", "caluma_form_question"."is_hidden", "caluma_form_question"."is_archived", "caluma_form_question"."placeholder", "caluma_form_question"."info_text", "caluma_form_question"."hint_text", "caluma_form_question"."static_content", "caluma_form_question"."configuration", "caluma_form_question"."meta", "caluma_form_question"."data_source", "caluma_form_question"."row_form_id", "caluma_form_question"."sub_form_id", "caluma_form_question"."source_id", "caluma_form_question"."format_validators", "caluma_form_question"."default_answer_id", "caluma_form_question"."calc_expression", "caluma_form_question"."calc_dependents" FROM "caluma_form_question" WHERE "caluma_form_question"."slug" = \'top_question\' LIMIT 21',
      'time': '0.000',
    }),
    dict({
      'sql': 'SAVEPOINT "s138278537434944_x64"',
      'time': '0.000',
    }),
    dict({
      'sql': 'UPDATE "caluma_form_answer" SET "created_at" = \'2025-01-09 09:37:43.921891+00:00\'::timestamptz, "modified_at" = \'2025-01-09 09:37:44.030007+00:00\'::timestamptz, "created_by_user" = \'9018a766-da92-4600-a3d9-5971fc8d80b6\', "created_by_group" = \'c08de5f9-49d2-46fe-8315-e090eeeb46db\', "modified_by_user" = \'9018a766-da92-4600-a3d9-5971fc8d80b6\', "modified_by_group" = \'c08de5f9-49d2-46fe-8315-e090eeeb46db\', "question_id" = \'top_question\', "value" = \'"1"\'::jsonb, "meta" = \'{}\'::jsonb, "document_id" = \'9df16143c288452b8b6435ebe3be969f\'::uuid, "date" = NULL WHERE "caluma_form_answer"."id" = \'d5900ce6bb6d4b0e96d6fa77a191aecd\'::uuid',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_question"."created_at", "caluma_form_question"."modified_at", "caluma_form_question"."created_by_user", "caluma_form_question"."created_by_group", "caluma_form_question"."modified_by_user", "caluma_form_question"."modified_by_group", "caluma_form_question"."slug", "caluma_form_question"."label", "caluma_form_question"."type", "caluma_form_question"."is_required", "caluma_form_question"."is_hidden", "caluma_form_question"."is_archived", "caluma_form_question"."placeholder", "caluma_form_question"."info_text", "caluma_form_question"."hint_text", "caluma_form_question"."static_content", "caluma_form_question"."configuration", "caluma_form_question"."meta", "caluma_form_question"."data_source", "caluma_form_question"."row_form_id", "caluma_form_question"."sub_form_id", "caluma_form_question"."source_id", "caluma_form_question"."format_validators", "caluma_form_question"."default_answer_id", "caluma_form_question"."calc_expression", "caluma_form_question"."calc_dependents" FROM "caluma_form_question" WHERE "caluma_form_question"."slug" = \'top_question\' LIMIT 21',
      'time': '0.000',
    }),
    dict({
      'sql': 'INSERT INTO "caluma_form_historicalanswer" ("created_at", "modified_at", "created_by_user", "created_by_group", "modified_by_user", "modified_by_group", "history_question_type", "id", "value", "meta", "date", "history_user_id", "question_id", "document_id", "history_id", "history_date", "history_change_reason", "history_type") VALUES (\'2025-01-09 09:37:43.921891+00:00\'::timestamptz, \'2025-01-09 09:37:44.030007+00:00\'::timestamptz, \'9018a766-da92-4600-a3d9-5971fc8d80b6\', \'c08de5f9-49d2-46fe-8315-e090eeeb46db\', \'9018a766-da92-4600-a3d9-5971fc8d80b6\', \'c08de5f9-49d2-46fe-8315-e090eeeb46db\', \'text\', \'d5900ce6bb6d4b0e96d6fa77a191aecd\'::uuid, \'"1"\'::jsonb, \'{}\'::jsonb, NULL, \'AnonymousUser\', \'top_question\', \'9df16143c288452b8b6435ebe3be969f\'::uuid, \'528217079f5f4726940a44cd7aeacbcd\'::uuid, \'2025-01-09 09:37:44.030619+00:00\'::timestamptz, NULL, \'~\')',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_answer"."created_at", "caluma_form_answer"."modified_at", "caluma_form_answer"."created_by_user", "caluma_form_answer"."created_by_group", "caluma_form_answer"."modified_by_user", "caluma_form_answer"."modified_by_group", "caluma_form_answer"."id", "caluma_form_answer"."question_id", "caluma_form_answer"."value", "caluma_form_answer"."meta", "caluma_form_answer"."document_id", "caluma_form_answer"."date" FROM "caluma_form_answer" WHERE "caluma_form_answer"."id" = \'d5900ce6bb6d4b0e96d6fa77a191aecd\'::uuid LIMIT 21',
      'time': '0.000',
    }),
    dict({
      'sql': 'RELEASE SAVEPOINT "s138278537434944_x64"',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_question"."created_at", "caluma_form_question"."modified_at", "caluma_form_question"."created_by_user", "caluma_form_question"."created_by_group", "caluma_form_question"."modified_by_user", "caluma_form_question"."modified_by_group", "caluma_form_question"."slug", "caluma_form_question"."label", "caluma_form_question"."type", "caluma_form_question"."is_required", "caluma_form_question"."is_hidden", "caluma_form_question"."is_archived", "caluma_form_question"."placeholder", "caluma_form_question"."info_text", "caluma_form_question"."hint_text", "caluma_form_question"."static_content", "caluma_form_question"."configuration", "caluma_form_question"."meta", "caluma_form_question"."data_source", "caluma_form_question"."row_form_id", "caluma_form_question"."sub_form_id", "caluma_form_question"."source_id", "caluma_form_question"."format_validators", "caluma_form_question"."default_answer_id", "caluma_form_question"."calc_expression", "caluma_form_question"."calc_dependents" FROM "caluma_form_question" WHERE "caluma_form_question"."slug" = \'top_question\' LIMIT 21',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_document"."created_at", "caluma_form_document"."modified_at", "caluma_form_document"."created_by_user", "caluma_form_document"."created_by_group", "caluma_form_document"."modified_by_user", "caluma_form_document"."modified_by_group", "caluma_form_document"."id", "caluma_form_document"."family_id", "caluma_form_document"."form_id", "caluma_form_document"."source_id", "caluma_form_document"."meta" FROM "caluma_form_document" WHERE "caluma_form_document"."id" = \'9df16143c288452b8b6435ebe3be969f\'::uuid LIMIT 21',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_document"."created_at", "caluma_form_document"."modified_at", "caluma_form_document"."created_by_user", "caluma_form_document"."created_by_group", "caluma_form_document"."modified_by_user", "caluma_form_document"."modified_by_group", "caluma_form_document"."id", "caluma_form_document"."family_id", "caluma_form_document"."form_id", "caluma_form_document"."source_id", "caluma_form_document"."meta" FROM "caluma_form_document" WHERE "caluma_form_document"."id" = \'9df16143c288452b8b6435ebe3be969f\'::uuid ORDER BY "caluma_form_document"."id" ASC LIMIT 1',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_answer"."created_at", "caluma_form_answer"."modified_at", "caluma_form_answer"."created_by_user", "caluma_form_answer"."created_by_group", "caluma_form_answer"."modified_by_user", "caluma_form_answer"."modified_by_group", "caluma_form_answer"."id", "caluma_form_answer"."question_id", "caluma_form_answer"."value", "caluma_form_answer"."meta", "caluma_form_answer"."document_id", "caluma_form_answer"."date" FROM "caluma_form_answer" WHERE "caluma_form_answer"."document_id" IN (\'9df16143c288452b8b6435ebe3be969f\'::uuid)',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_dynamicoption"."created_at", "caluma_form_dynamicoption"."modified_at", "caluma_form_dynamicoption"."created_by_user", "caluma_form_dynamicoption"."created_by_group", "caluma_form_dynamicoption"."modified_by_user", "caluma_form_dynamicoption"."modified_by_group", "caluma_form_dynamicoption"."id", "caluma_form_dynamicoption"."slug", "caluma_form_dynamicoption"."label", "caluma_form_dynamicoption"."document_id", "caluma_form_dynamicoption"."question_id" FROM "caluma_form_dynamicoption" WHERE "caluma_form_dynamicoption"."document_id" IN (\'9df16143c288452b8b6435ebe3be969f\'::uuid)',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_answerdocument"."created_at", "caluma_form_answerdocument"."modified_at", "caluma_form_answerdocument"."created_by_user", "caluma_form_answerdocument"."created_by_group", "caluma_form_answerdocument"."modified_by_user", "caluma_form_answerdocument"."modified_by_group", "caluma_form_answerdocument"."id", "caluma_form_answerdocument"."answer_id", "caluma_form_answerdocument"."document_id", "caluma_form_answerdocument"."sort", "caluma_form_document"."created_at", "caluma_form_document"."modified_at", "caluma_form_document"."created_by_user", "caluma_form_document"."created_by_group", "caluma_form_document"."modified_by_user", "caluma_form_document"."modified_by_group", "caluma_form_document"."id", "caluma_form_document"."family_id", "caluma_form_document"."form_id", "caluma_form_document"."source_id", "caluma_form_document"."meta", T4."created_at", T4."modified_at", T4."created_by_user", T4."created_by_group", T4."modified_by_user", T4."modified_by_group", T4."id", T4."family_id", T4."form_id", T4."source_id", T4."meta", "caluma_form_form"."created_at", "caluma_form_form"."modified_at", "caluma_form_form"."created_by_user", "caluma_form_form"."created_by_group", "caluma_form_form"."modified_by_user", "caluma_form_form"."modified_by_group", "caluma_form_form"."slug", "caluma_form_form"."name", "caluma_form_form"."description", "caluma_form_form"."meta", "caluma_form_form"."is_published", "caluma_form_form"."is_archived", "caluma_form_form"."source_id" FROM "caluma_form_answerdocument" INNER JOIN "caluma_form_document" ON ("caluma_form_answerdocument"."document_id" = "caluma_form_document"."id") LEFT OUTER JOIN "caluma_form_document" T4 ON ("caluma_form_document"."family_id" = T4."id") INNER JOIN "caluma_form_form" ON ("caluma_form_document"."form_id" = "caluma_form_form"."slug") WHERE "caluma_form_answerdocument"."answer_id" IN (\'b6f250f21acd42f3b875d84f24f322af\'::uuid, \'63402fbf811b41bd9d26435130837bb8\'::uuid, \'d5900ce6bb6d4b0e96d6fa77a191aecd\'::uuid) ORDER BY "caluma_form_answerdocument"."sort" DESC',
      'time': '0.001',
    }),
    dict({
      'sql': 'SELECT "caluma_form_answer"."created_at", "caluma_form_answer"."modified_at", "caluma_form_answer"."created_by_user", "caluma_form_answer"."created_by_group", "caluma_form_answer"."modified_by_user", "caluma_form_answer"."modified_by_group", "caluma_form_answer"."id", "caluma_form_answer"."question_id", "caluma_form_answer"."value", "caluma_form_answer"."meta", "caluma_form_answer"."document_id", "caluma_form_answer"."date" FROM "caluma_form_answer" WHERE "caluma_form_answer"."document_id" IN (\'d74d9e8527c44248a9718ca65517add2\'::uuid, \'607d99f831b744ec834f6545b6bcf4ec\'::uuid, \'273189dda7f0483ab34c2803153f8bc8\'::uuid, \'455a554e26594957a448a1d271e8a1e9\'::uuid, \'9829ebd4b30742cc82571d378632a60f\'::uuid, \'77c7b88cbc0a462f95b40488d8646fe2\'::uuid, \'775855c77fe2479895cff5877846b2fd\'::uuid, \'a0a08ac5b0e74cd7bf716d655d152200\'::uuid, \'7b07a7eda7f74dd4802c80880d572c66\'::uuid, \'3245e8ce4fae418ea5fcf2aa86b73bd3\'::uuid)',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT ("caluma_form_formquestion"."form_id") AS "_prefetch_related_val_form_id", "caluma_form_question"."created_at", "caluma_form_question"."modified_at", "caluma_form_question"."created_by_user", "caluma_form_question"."created_by_group", "caluma_form_question"."modified_by_user", "caluma_form_question"."modified_by_group", "caluma_form_question"."slug", "caluma_form_question"."label", "caluma_form_question"."type", "caluma_form_question"."is_required", "caluma_form_question"."is_hidden", "caluma_form_question"."is_archived", "caluma_form_question"."placeholder", "caluma_form_question"."info_text", "caluma_form_question"."hint_text", "caluma_form_question"."static_content", "caluma_form_question"."configuration", "caluma_form_question"."meta", "caluma_form_question"."data_source", "caluma_form_question"."row_form_id", "caluma_form_question"."sub_form_id", "caluma_form_question"."source_id", "caluma_form_question"."format_validators", "caluma_form_question"."default_answer_id", "caluma_form_question"."calc_expression", "caluma_form_question"."calc_dependents" FROM "caluma_form_question" INNER JOIN "caluma_form_formquestion" ON ("caluma_form_question"."slug" = "caluma_form_formquestion"."question_id") WHERE "caluma_form_formquestion"."form_id" IN (\'row_form\')',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_form"."created_at", "caluma_form_form"."modified_at", "caluma_form_form"."created_by_user", "caluma_form_form"."created_by_group", "caluma_form_form"."modified_by_user", "caluma_form_form"."modified_by_group", "caluma_form_form"."slug", "caluma_form_form"."name", "caluma_form_form"."description", "caluma_form_form"."meta", "caluma_form_form"."is_published", "caluma_form_form"."is_archived", "caluma_form_form"."source_id" FROM "caluma_form_form" WHERE "caluma_form_form"."slug" IN (\'top_form\')',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT ("caluma_form_formquestion"."form_id") AS "_prefetch_related_val_form_id", "caluma_form_question"."created_at", "caluma_form_question"."modified_at", "caluma_form_question"."created_by_user", "caluma_form_question"."created_by_group", "caluma_form_question"."modified_by_user", "caluma_form_question"."modified_by_group", "caluma_form_question"."slug", "caluma_form_question"."label", "caluma_form_question"."type", "caluma_form_question"."is_required", "caluma_form_question"."is_hidden", "caluma_form_question"."is_archived", "caluma_form_question"."placeholder", "caluma_form_question"."info_text", "caluma_form_question"."hint_text", "caluma_form_question"."static_content", "caluma_form_question"."configuration", "caluma_form_question"."meta", "caluma_form_question"."data_source", "caluma_form_question"."row_form_id", "caluma_form_question"."sub_form_id", "caluma_form_question"."source_id", "caluma_form_question"."format_validators", "caluma_form_question"."default_answer_id", "caluma_form_question"."calc_expression", "caluma_form_question"."calc_dependents", T4."created_at", T4."modified_at", T4."created_by_user", T4."created_by_group", T4."modified_by_user", T4."modified_by_group", T4."slug", T4."name", T4."description", T4."meta", T4."is_published", T4."is_archived", T4."source_id", T5."created_at", T5."modified_at", T5."created_by_user", T5."created_by_group", T5."modified_by_user", T5."modified_by_group", T5."slug", T5."name", T5."description", T5."meta", T5."is_published", T5."is_archived", T5."source_id" FROM "caluma_form_question" INNER JOIN "caluma_form_formquestion" ON ("caluma_form_question"."slug" = "caluma_form_formquestion"."question_id") LEFT OUTER JOIN "caluma_form_form" T4 ON ("caluma_form_question"."row_form_id" = T4."slug") LEFT OUTER JOIN "caluma_form_form" T5 ON ("caluma_form_question"."sub_form_id" = T5."slug") WHERE "caluma_form_formquestion"."form_id" IN (\'top_form\') ORDER BY "caluma_form_formquestion"."sort" DESC',
      'time': '0.001',
    }),
    dict({
      'sql': 'SELECT ("caluma_form_questionoption"."question_id") AS "_prefetch_related_val_question_id", "caluma_form_option"."created_at", "caluma_form_option"."modified_at", "caluma_form_option"."created_by_user", "caluma_form_option"."created_by_group", "caluma_form_option"."modified_by_user", "caluma_form_option"."modified_by_group", "caluma_form_option"."slug", "caluma_form_option"."label", "caluma_form_option"."is_hidden", "caluma_form_option"."is_archived", "caluma_form_option"."meta", "caluma_form_option"."source_id" FROM "caluma_form_option" INNER JOIN "caluma_form_questionoption" ON ("caluma_form_option"."slug" = "caluma_form_questionoption"."option_id") WHERE "caluma_form_questionoption"."question_id" IN (\'top_question\', \'table\', \'form\', \'calc_question\') ORDER BY "caluma_form_questionoption"."sort" DESC',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT ("caluma_form_formquestion"."form_id") AS "_prefetch_related_val_form_id", "caluma_form_question"."created_at", "caluma_form_question"."modified_at", "caluma_form_question"."created_by_user", "caluma_form_question"."created_by_group", "caluma_form_question"."modified_by_user", "caluma_form_question"."modified_by_group", "caluma_form_question"."slug", "caluma_form_question"."label", "caluma_form_question"."type", "caluma_form_question"."is_required", "caluma_form_question"."is_hidden", "caluma_form_question"."is_archived", "caluma_form_question"."placeholder", "caluma_form_question"."info_text", "caluma_form_question"."hint_text", "caluma_form_question"."static_content", "caluma_form_question"."configuration", "caluma_form_question"."meta", "caluma_form_question"."data_source", "caluma_form_question"."row_form_id", "caluma_form_question"."sub_form_id", "caluma_form_question"."source_id", "caluma_form_question"."format_validators", "caluma_form_question"."default_answer_id", "caluma_form_question"."calc_expression", "caluma_form_question"."calc_dependents", T4."created_at", T4."modified_at", T4."created_by_user", T4."created_by_group", T4."modified_by_user", T4."modified_by_group", T4."slug", T4."name", T4."description", T4."meta", T4."is_published", T4."is_archived", T4."source_id", T5."created_at", T5."modified_at", T5."created_by_user", T5."created_by_group", T5."modified_by_user", T5."modified_by_group", T5."slug", T5."name", T5."description", T5."meta", T5."is_published", T5."is_archived", T5."source_id" FROM "caluma_form_question" INNER JOIN "caluma_form_formquestion" ON ("caluma_form_question"."slug" = "caluma_form_formquestion"."question_id") LEFT OUTER JOIN "caluma_form_form" T4 ON ("caluma_form_question"."row_form_id" = T4."slug") LEFT OUTER JOIN "caluma_form_form" T5 ON ("caluma_form_question"."sub_form_id" = T5."slug") WHERE "caluma_form_formquestion"."form_id" IN (\'row_form\') ORDER BY "caluma_form_formquestion"."sort" DESC',
      'time': '0.001',
    }),
    dict({
      'sql': 'SELECT ("caluma_form_questionoption"."question_id") AS "_prefetch_related_val_question_id", "caluma_form_option"."created_at", "caluma_form_option"."modified_at", "caluma_form_option"."created_by_user", "caluma_form_option"."created_by_group", "caluma_form_option"."modified_by_user", "caluma_form_option"."modified_by_group", "caluma_form_option"."slug", "caluma_form_option"."label", "caluma_form_option"."is_hidden", "caluma_form_option"."is_archived", "caluma_form_option"."meta", "caluma_form_option"."source_id" FROM "caluma_form_option" INNER JOIN "caluma_form_questionoption" ON ("caluma_form_option"."slug" = "caluma_form_questionoption"."option_id") WHERE "caluma_form_questionoption"."question_id" IN (\'column\') ORDER BY "caluma_form_questionoption"."sort" DESC',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT ("caluma_form_formquestion"."form_id") AS "_prefetch_related_val_form_id", "caluma_form_question"."created_at", "caluma_form_question"."modified_at", "caluma_form_question"."created_by_user", "caluma_form_question"."created_by_group", "caluma_form_question"."modified_by_user", "caluma_form_question"."modified_by_group", "caluma_form_question"."slug", "caluma_form_question"."label", "caluma_form_question"."type", "caluma_form_question"."is_required", "caluma_form_question"."is_hidden", "caluma_form_question"."is_archived", "caluma_form_question"."placeholder", "caluma_form_question"."info_text", "caluma_form_question"."hint_text", "caluma_form_question"."static_content", "caluma_form_question"."configuration", "caluma_form_question"."meta", "caluma_form_question"."data_source", "caluma_form_question"."row_form_id", "caluma_form_question"."sub_form_id", "caluma_form_question"."source_id", "caluma_form_question"."format_validators", "caluma_form_question"."default_answer_id", "caluma_form_question"."calc_expression", "caluma_form_question"."calc_dependents", T4."created_at", T4."modified_at", T4."created_by_user", T4."created_by_group", T4."modified_by_user", T4."modified_by_group", T4."slug", T4."name", T4."description", T4."meta", T4."is_published", T4."is_archived", T4."source_id", T5."created_at", T5."modified_at", T5."created_by_user", T5."created_by_group", T5."modified_by_user", T5."modified_by_group", T5."slug", T5."name", T5."description", T5."meta", T5."is_published", T5."is_archived", T5."source_id" FROM "caluma_form_question" INNER JOIN "caluma_form_formquestion" ON ("caluma_form_question"."slug" = "caluma_form_formquestion"."question_id") LEFT OUTER JOIN "caluma_form_form" T4 ON ("caluma_form_question"."row_form_id" = T4."slug") LEFT OUTER JOIN "caluma_form_form" T5 ON ("caluma_form_question"."sub_form_id" = T5."slug") WHERE "caluma_form_formquestion"."form_id" IN (\'sub_form\') ORDER BY "caluma_form_formquestion"."sort" DESC',
      'time': '0.001',
    }),
    dict({
      'sql': 'SELECT ("caluma_form_questionoption"."question_id") AS "_prefetch_related_val_question_id", "caluma_form_option"."created_at", "caluma_form_option"."modified_at", "caluma_form_option"."created_by_user", "caluma_form_option"."created_by_group", "caluma_form_option"."modified_by_user", "caluma_form_option"."modified_by_group", "caluma_form_option"."slug", "caluma_form_option"."label", "caluma_form_option"."is_hidden", "caluma_form_option"."is_archived", "caluma_form_option"."meta", "caluma_form_option"."source_id" FROM "caluma_form_option" INNER JOIN "caluma_form_questionoption" ON ("caluma_form_option"."slug" = "caluma_form_questionoption"."option_id") WHERE "caluma_form_questionoption"."question_id" IN (\'sub_question\') ORDER BY "caluma_form_questionoption"."sort" DESC',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_question"."created_at", "caluma_form_question"."modified_at", "caluma_form_question"."created_by_user", "caluma_form_question"."created_by_group", "caluma_form_question"."modified_by_user", "caluma_form_question"."modified_by_group", "caluma_form_question"."slug", "caluma_form_question"."label", "caluma_form_question"."type", "caluma_form_question"."is_required", "caluma_form_question"."is_hidden", "caluma_form_question"."is_archived", "caluma_form_question"."placeholder", "caluma_form_question"."info_text", "caluma_form_question"."hint_text", "caluma_form_question"."static_content", "caluma_form_question"."configuration", "caluma_form_question"."meta", "caluma_form_question"."data_source", "caluma_form_question"."row_form_id", "caluma_form_question"."sub_form_id", "caluma_form_question"."source_id", "caluma_form_question"."format_validators", "caluma_form_question"."default_answer_id", "caluma_form_question"."calc_expression", "caluma_form_question"."calc_dependents" FROM "caluma_form_question" WHERE "caluma_form_question"."slug" IN (\'calc_question\')',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_document"."created_at", "caluma_form_document"."modified_at", "caluma_form_document"."created_by_user", "caluma_form_document"."created_by_group", "caluma_form_document"."modified_by_user", "caluma_form_document"."modified_by_group", "caluma_form_document"."id", "caluma_form_document"."family_id", "caluma_form_document"."form_id", "caluma_form_document"."source_id", "caluma_form_document"."meta" FROM "caluma_form_document" WHERE "caluma_form_document"."id" = \'9df16143c288452b8b6435ebe3be969f\'::uuid LIMIT 21',
      'time': '0.000',
    }),
    dict({
      'sql': 'SAVEPOINT "s138278537434944_x65"',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_answer"."created_at", "caluma_form_answer"."modified_at", "caluma_form_answer"."created_by_user", "caluma_form_answer"."created_by_group", "caluma_form_answer"."modified_by_user", "caluma_form_answer"."modified_by_group", "caluma_form_answer"."id", "caluma_form_answer"."question_id", "caluma_form_answer"."value", "caluma_form_answer"."meta", "caluma_form_answer"."document_id", "caluma_form_answer"."date" FROM "caluma_form_answer" WHERE ("caluma_form_answer"."document_id" = \'9df16143c288452b8b6435ebe3be969f\'::uuid AND "caluma_form_answer"."question_id" = \'calc_question\') LIMIT 21 FOR UPDATE',
      'time': '0.000',
    }),
    dict({
      'sql': 'SAVEPOINT "s138278537434944_x66"',
      'time': '0.000',
    }),
    dict({
      'sql': 'INSERT INTO "caluma_form_answer" ("created_at", "modified_at", "created_by_user", "created_by_group", "modified_by_user", "modified_by_group", "id", "question_id", "value", "meta", "document_id", "date") VALUES (\'2025-01-09 09:37:44.056354+00:00\'::timestamptz, \'2025-01-09 09:37:44.056366+00:00\'::timestamptz, NULL, NULL, NULL, NULL, \'21677e8245f84289bb6af3e17ec0366d\'::uuid, \'calc_question\', NULL, \'{}\'::jsonb, \'9df16143c288452b8b6435ebe3be969f\'::uuid, NULL)',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_question"."created_at", "caluma_form_question"."modified_at", "caluma_form_question"."created_by_user", "caluma_form_question"."created_by_group", "caluma_form_question"."modified_by_user", "caluma_form_question"."modified_by_group", "caluma_form_question"."slug", "caluma_form_question"."label", "caluma_form_question"."type", "caluma_form_question"."is_required", "caluma_form_question"."is_hidden", "caluma_form_question"."is_archived", "caluma_form_question"."placeholder", "caluma_form_question"."info_text", "caluma_form_question"."hint_text", "caluma_form_question"."static_content", "caluma_form_question"."configuration", "caluma_form_question"."meta", "caluma_form_question"."data_source", "caluma_form_question"."row_form_id", "caluma_form_question"."sub_form_id", "caluma_form_question"."source_id", "caluma_form_question"."format_validators", "caluma_form_question"."default_answer_id", "caluma_form_question"."calc_expression", "caluma_form_question"."calc_dependents" FROM "caluma_form_question" WHERE "caluma_form_question"."slug" = \'calc_question\' LIMIT 21',
      'time': '0.000',
    }),
    dict({
      'sql': 'INSERT INTO "caluma_form_historicalanswer" ("created_at", "modified_at", "created_by_user", "created_by_group", "modified_by_user", "modified_by_group", "history_question_type", "id", "value", "meta", "date", "history_user_id", "question_id", "document_id", "history_id", "history_date", "history_change_reason", "history_type") VALUES (\'2025-01-09 09:37:44.056354+00:00\'::timestamptz, \'2025-01-09 09:37:44.056366+00:00\'::timestamptz, NULL, NULL, NULL, NULL, \'calculated_float\', \'21677e8245f84289bb6af3e17ec0366d\'::uuid, NULL, \'{}\'::jsonb, NULL, \'AnonymousUser\', \'calc_question\', \'9df16143c288452b8b6435ebe3be969f\'::uuid, \'fe2295cba2ed4a9fbd3c54cba14ab7ad\'::uuid, \'2025-01-09 09:37:44.056789+00:00\'::timestamptz, NULL, \'+\')',
      'time': '0.000',
    }),
    dict({
      'sql': 'RELEASE SAVEPOINT "s138278537434944_x66"',
      'time': '0.000',
    }),
    dict({
      'sql': 'RELEASE SAVEPOINT "s138278537434944_x65"',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_answer"."created_at", "caluma_form_answer"."modified_at", "caluma_form_answer"."created_by_user", "caluma_form_answer"."created_by_group", "caluma_form_answer"."modified_by_user", "caluma_form_answer"."modified_by_group", "caluma_form_answer"."id", "caluma_form_answer"."question_id", "caluma_form_answer"."value", "caluma_form_answer"."meta", "caluma_form_answer"."document_id", "caluma_form_answer"."date" FROM "caluma_form_answer" WHERE "caluma_form_answer"."id" = \'d5900ce6bb6d4b0e96d6fa77a191aecd\'::uuid LIMIT 21',
      'time': '0.000',
    }),
    dict({
      'sql': 'RELEASE SAVEPOINT "s138278537434944_x63"',
      'time': '0.000',
    }),
    dict({
      'sql': 'SELECT "caluma_form_question"."created_at", "caluma_form_question"."modified_at", "caluma_form_question"."created_by_user", "caluma_form_question"."created_by_group", "caluma_form_question"."modified_by_user", "caluma_form_question"."modified_by_group", "caluma_form_question"."slug", "caluma_form_question"."label", "caluma_form_question"."type", "caluma_form_question"."is_required", "caluma_form_question"."is_hidden", "caluma_form_question"."is_archived", "caluma_form_question"."placeholder", "caluma_form_question"."info_text", "caluma_form_question"."hint_text", "caluma_form_question"."static_content", "caluma_form_question"."configuration", "caluma_form_question"."meta", "caluma_form_question"."data_source", "caluma_form_question"."row_form_id", "caluma_form_question"."sub_form_id", "caluma_form_question"."source_id", "caluma_form_question"."format_validators", "caluma_form_question"."default_answer_id", "caluma_form_question"."calc_expression", "caluma_form_question"."calc_dependents" FROM "caluma_form_question" WHERE "caluma_form_question"."slug" = \'top_question\' LIMIT 21',
      'time': '0.000',
    }),
  ])
# ---
# name: test_query_all_questions[action_button-question__configuration14-None-question__format_validators14]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'ActionButtonQuestion',
            'id': 'QWN0aW9uQnV0dG9uUXVlc3Rpb246ZW52aXJvbm1lbnRhbC10ZW4=',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[calculated_float-question__configuration13-None-question__format_validators13]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'CalculatedFloatQuestion',
            'calcExpression': '-1.0',
            'hintText': '',
            'id': 'Q2FsY3VsYXRlZEZsb2F0UXVlc3Rpb246ZW52aXJvbm1lbnRhbC10ZW4=',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[choice-question__configuration6-None-question__format_validators6]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'ChoiceQuestion',
            'hintText': '',
            'id': 'Q2hvaWNlUXVlc3Rpb246ZW52aXJvbm1lbnRhbC10ZW4=',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'options': dict({
              'edges': list([
                dict({
                  'node': dict({
                    'slug': 'measure-evening',
                  }),
                }),
              ]),
              'totalCount': 1,
            }),
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[date-question__configuration3-None-question__format_validators3]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'DateQuestion',
            'hintText': '',
            'id': 'RGF0ZVF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[dynamic_choice-question__configuration10-MyDataSource-question__format_validators10]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'DynamicChoiceQuestion',
            'hintText': '',
            'id': 'RHluYW1pY0Nob2ljZVF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'options': dict({
              'edges': list([
                dict({
                  'node': dict({
                    'label': '1',
                    'slug': '1',
                  }),
                }),
                dict({
                  'node': dict({
                    'label': '5.5',
                    'slug': '5.5',
                  }),
                }),
                dict({
                  'node': dict({
                    'label': 'sdkj',
                    'slug': 'sdkj',
                  }),
                }),
                dict({
                  'node': dict({
                    'label': 'info',
                    'slug': 'value',
                  }),
                }),
                dict({
                  'node': dict({
                    'label': 'something',
                    'slug': 'something',
                  }),
                }),
                dict({
                  'node': dict({
                    'label': 'english description',
                    'slug': 'translated_value',
                  }),
                }),
              ]),
            }),
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[dynamic_multiple_choice-question__configuration11-MyDataSource-question__format_validators11]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'DynamicMultipleChoiceQuestion',
            'hintText': '',
            'id': 'RHluYW1pY011bHRpcGxlQ2hvaWNlUXVlc3Rpb246ZW52aXJvbm1lbnRhbC10ZW4=',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'options': dict({
              'edges': list([
                dict({
                  'node': dict({
                    'label': '1',
                    'slug': '1',
                  }),
                }),
                dict({
                  'node': dict({
                    'label': '5.5',
                    'slug': '5.5',
                  }),
                }),
                dict({
                  'node': dict({
                    'label': 'sdkj',
                    'slug': 'sdkj',
                  }),
                }),
                dict({
                  'node': dict({
                    'label': 'info',
                    'slug': 'value',
                  }),
                }),
                dict({
                  'node': dict({
                    'label': 'something',
                    'slug': 'something',
                  }),
                }),
                dict({
                  'node': dict({
                    'label': 'english description',
                    'slug': 'translated_value',
                  }),
                }),
              ]),
            }),
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[files-question__configuration9-None-question__format_validators9]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'FilesQuestion',
            'hintText': '',
            'id': 'RmlsZXNRdWVzdGlvbjplbnZpcm9ubWVudGFsLXRlbg==',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[float-question__configuration1-None-question__format_validators1]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'FloatQuestion',
            'floatMaxValue': 1.0,
            'floatMinValue': 0.0,
            'hintText': '',
            'id': 'RmxvYXRRdWVzdGlvbjplbnZpcm9ubWVudGFsLXRlbg==',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'placeholder': '',
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[float-question__configuration2-None-question__format_validators2]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'FloatQuestion',
            'floatMaxValue': None,
            'floatMinValue': None,
            'hintText': '',
            'id': 'RmxvYXRRdWVzdGlvbjplbnZpcm9ubWVudGFsLXRlbg==',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'placeholder': '',
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[form-question__configuration8-None-question__format_validators8]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'FormQuestion',
            'id': 'Rm9ybVF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'slug': 'environmental-ten',
            'subForm': dict({
              'slug': 'eight-traditional',
            }),
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[integer-question__configuration0-None-question__format_validators0]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'IntegerQuestion',
            'hintText': '',
            'id': 'SW50ZWdlclF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
            'infoText': '',
            'integerMaxValue': 10,
            'integerMinValue': 0,
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'placeholder': '',
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[multiple_choice-question__configuration7-None-question__format_validators7]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'MultipleChoiceQuestion',
            'hintText': '',
            'id': 'TXVsdGlwbGVDaG9pY2VRdWVzdGlvbjplbnZpcm9ubWVudGFsLXRlbg==',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'options': dict({
              'edges': list([
                dict({
                  'node': dict({
                    'slug': 'measure-evening',
                  }),
                }),
              ]),
              'totalCount': 1,
            }),
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[static-question__configuration12-None-question__format_validators12]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'StaticQuestion',
            'id': 'U3RhdGljUXVlc3Rpb246ZW52aXJvbm1lbnRhbC10ZW4=',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'meta': dict({
            }),
            'slug': 'environmental-ten',
            'staticContent': '''
              Station story first. Team suggest traditional boy above. Argue move appear catch toward help wind.
              Kid avoid player relationship to range whose. Draw free property consider.
            ''',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[text-question__configuration4-None-question__format_validators4]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'TextQuestion',
            'formatValidators': dict({
              'edges': list([
                dict({
                  'node': dict({
                    'errorMsg': 'Please enter a valid e-mail address',
                    'name': 'E-mail address',
                    'regex': '(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)',
                    'slug': 'email',
                  }),
                }),
              ]),
            }),
            'hintText': '',
            'id': 'VGV4dFF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'maxLength': None,
            'meta': dict({
            }),
            'minLength': 10,
            'placeholder': '',
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_query_all_questions[textarea-question__configuration5-None-question__format_validators5]
  dict({
    'allQuestions': dict({
      'edges': list([
        dict({
          'node': dict({
            '__typename': 'TextareaQuestion',
            'formatValidators': dict({
              'edges': list([
              ]),
            }),
            'hintText': '',
            'id': 'VGV4dGFyZWFRdWVzdGlvbjplbnZpcm9ubWVudGFsLXRlbg==',
            'infoText': '',
            'label': 'Bonnie Moreno',
            'maxLength': 10,
            'meta': dict({
            }),
            'minLength': None,
            'placeholder': '',
            'slug': 'environmental-ten',
          }),
        }),
      ]),
      'totalCount': 1,
    }),
  })
# ---
# name: test_save_action_button_question[action_button]
  dict({
    'saveActionButtonQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'ActionButtonQuestion',
        'action': 'SKIP',
        'color': 'PRIMARY',
        'id': 'QWN0aW9uQnV0dG9uUXVlc3Rpb246ZW52aXJvbm1lbnRhbC10ZW4=',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'slug': 'environmental-ten',
        'validateOnEnter': False,
      }),
    }),
  })
# ---
# name: test_save_choice_question[choice-False]
  dict({
    'saveChoiceQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'ChoiceQuestion',
        'defaultAnswer': None,
        'hintText': '',
        'id': 'Q2hvaWNlUXVlc3Rpb246ZW52aXJvbm1lbnRhbC10ZW4=',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'options': dict({
          'edges': list([
            dict({
              'node': dict({
                'label': 'Susan Wilson',
                'slug': 'eight-traditional',
              }),
            }),
          ]),
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_choice_question[choice-True]
  dict({
    'saveChoiceQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'ChoiceQuestion',
        'defaultAnswer': dict({
          'value': 'eight-traditional',
        }),
        'hintText': 'test',
        'id': 'Q2hvaWNlUXVlc3Rpb246ZW52aXJvbm1lbnRhbC10ZW4=',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'options': dict({
          'edges': list([
            dict({
              'node': dict({
                'label': 'Susan Wilson',
                'slug': 'eight-traditional',
              }),
            }),
          ]),
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_dynamic_choice_question[dynamic_choice-False]
  dict({
    'saveDynamicChoiceQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'DynamicChoiceQuestion',
        'hintText': 'test',
        'id': 'RHluYW1pY0Nob2ljZVF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'options': dict({
          'edges': list([
            dict({
              'node': dict({
                'label': '1',
                'slug': '1',
              }),
            }),
            dict({
              'node': dict({
                'label': '5.5',
                'slug': '5.5',
              }),
            }),
            dict({
              'node': dict({
                'label': 'sdkj',
                'slug': 'sdkj',
              }),
            }),
            dict({
              'node': dict({
                'label': 'info',
                'slug': 'value',
              }),
            }),
            dict({
              'node': dict({
                'label': 'something',
                'slug': 'something',
              }),
            }),
            dict({
              'node': dict({
                'label': 'english description',
                'slug': 'translated_value',
              }),
            }),
          ]),
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_dynamic_choice_question[dynamic_choice-True]
  dict({
    'saveDynamicChoiceQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'DynamicChoiceQuestion',
        'hintText': 'test',
        'id': 'RHluYW1pY0Nob2ljZVF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'options': dict({
          'edges': list([
            dict({
              'node': dict({
                'label': '1',
                'slug': '1',
              }),
            }),
            dict({
              'node': dict({
                'label': '5.5',
                'slug': '5.5',
              }),
            }),
            dict({
              'node': dict({
                'label': 'sdkj',
                'slug': 'sdkj',
              }),
            }),
            dict({
              'node': dict({
                'label': 'info',
                'slug': 'value',
              }),
            }),
            dict({
              'node': dict({
                'label': 'something',
                'slug': 'something',
              }),
            }),
            dict({
              'node': dict({
                'label': 'english description',
                'slug': 'translated_value',
              }),
            }),
          ]),
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_dynamic_choice_question[dynamic_multiple_choice-False]
  dict({
    'saveDynamicChoiceQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'DynamicChoiceQuestion',
        'hintText': 'test',
        'id': 'RHluYW1pY0Nob2ljZVF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'options': dict({
          'edges': list([
            dict({
              'node': dict({
                'label': '1',
                'slug': '1',
              }),
            }),
            dict({
              'node': dict({
                'label': '5.5',
                'slug': '5.5',
              }),
            }),
            dict({
              'node': dict({
                'label': 'sdkj',
                'slug': 'sdkj',
              }),
            }),
            dict({
              'node': dict({
                'label': 'info',
                'slug': 'value',
              }),
            }),
            dict({
              'node': dict({
                'label': 'something',
                'slug': 'something',
              }),
            }),
            dict({
              'node': dict({
                'label': 'english description',
                'slug': 'translated_value',
              }),
            }),
          ]),
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_dynamic_choice_question[dynamic_multiple_choice-True]
  dict({
    'saveDynamicChoiceQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'DynamicChoiceQuestion',
        'hintText': 'test',
        'id': 'RHluYW1pY0Nob2ljZVF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'options': dict({
          'edges': list([
            dict({
              'node': dict({
                'label': '1',
                'slug': '1',
              }),
            }),
            dict({
              'node': dict({
                'label': '5.5',
                'slug': '5.5',
              }),
            }),
            dict({
              'node': dict({
                'label': 'sdkj',
                'slug': 'sdkj',
              }),
            }),
            dict({
              'node': dict({
                'label': 'info',
                'slug': 'value',
              }),
            }),
            dict({
              'node': dict({
                'label': 'something',
                'slug': 'something',
              }),
            }),
            dict({
              'node': dict({
                'label': 'english description',
                'slug': 'translated_value',
              }),
            }),
          ]),
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_dynamic_multiple_choice_question[dynamic_multiple_choice-False]
  dict({
    'saveDynamicMultipleChoiceQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'DynamicMultipleChoiceQuestion',
        'hintText': 'test',
        'id': 'RHluYW1pY011bHRpcGxlQ2hvaWNlUXVlc3Rpb246ZW52aXJvbm1lbnRhbC10ZW4=',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'options': dict({
          'edges': list([
            dict({
              'node': dict({
                'label': '1',
                'slug': '1',
              }),
            }),
            dict({
              'node': dict({
                'label': '5.5',
                'slug': '5.5',
              }),
            }),
            dict({
              'node': dict({
                'label': 'sdkj',
                'slug': 'sdkj',
              }),
            }),
            dict({
              'node': dict({
                'label': 'info',
                'slug': 'value',
              }),
            }),
            dict({
              'node': dict({
                'label': 'something',
                'slug': 'something',
              }),
            }),
            dict({
              'node': dict({
                'label': 'english description',
                'slug': 'translated_value',
              }),
            }),
          ]),
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_dynamic_multiple_choice_question[dynamic_multiple_choice-True]
  dict({
    'saveDynamicMultipleChoiceQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'DynamicMultipleChoiceQuestion',
        'hintText': 'test',
        'id': 'RHluYW1pY011bHRpcGxlQ2hvaWNlUXVlc3Rpb246ZW52aXJvbm1lbnRhbC10ZW4=',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'options': dict({
          'edges': list([
            dict({
              'node': dict({
                'label': '1',
                'slug': '1',
              }),
            }),
            dict({
              'node': dict({
                'label': '5.5',
                'slug': '5.5',
              }),
            }),
            dict({
              'node': dict({
                'label': 'sdkj',
                'slug': 'sdkj',
              }),
            }),
            dict({
              'node': dict({
                'label': 'info',
                'slug': 'value',
              }),
            }),
            dict({
              'node': dict({
                'label': 'something',
                'slug': 'something',
              }),
            }),
            dict({
              'node': dict({
                'label': 'english description',
                'slug': 'translated_value',
              }),
            }),
          ]),
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_float_question[float-question__configuration0-0.3-True]
  dict({
    'saveFloatQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'FloatQuestion',
        'defaultAnswer': dict({
          'value': 0.3,
        }),
        'hintText': 'test',
        'id': 'RmxvYXRRdWVzdGlvbjplbnZpcm9ubWVudGFsLXRlbg==',
        'label': 'Bonnie Moreno',
        'maxValue': 10.0,
        'meta': dict({
        }),
        'minValue': 0.0,
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_form_question[form]
  dict({
    'saveFormQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'FormQuestion',
        'id': 'Rm9ybVF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'slug': 'environmental-ten',
        'subForm': dict({
          'slug': 'eight-traditional',
        }),
      }),
    }),
  })
# ---
# name: test_save_integer_question[integer-question__configuration0-23-True]
  dict({
    'saveIntegerQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'IntegerQuestion',
        'defaultAnswer': dict({
          'value': 23,
        }),
        'hintText': 'test',
        'id': 'SW50ZWdlclF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
        'label': 'Bonnie Moreno',
        'maxValue': 10,
        'meta': dict({
        }),
        'minValue': 0,
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_multiple_choice_question[multiple_choice]
  dict({
    'saveMultipleChoiceQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'MultipleChoiceQuestion',
        'defaultAnswer': dict({
          'value': list([
            'maybe-stock-capital',
            'court-ask',
          ]),
        }),
        'hintText': 'test',
        'id': 'TXVsdGlwbGVDaG9pY2VRdWVzdGlvbjplbnZpcm9ubWVudGFsLXRlbg==',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'options': dict({
          'edges': list([
            dict({
              'node': dict({
                'label': 'William Ramos',
                'slug': 'maybe-stock-capital',
              }),
            }),
            dict({
              'node': dict({
                'label': 'Scott Powell',
                'slug': 'court-ask',
              }),
            }),
          ]),
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_question[true-True-SaveCalculatedFloatQuestion]
  dict({
    'saveCalculatedFloatQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'CalculatedFloatQuestion',
        'id': 'Q2FsY3VsYXRlZEZsb2F0UXVlc3Rpb246ZW52aXJvbm1lbnRhbC10ZW4=',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_question[true-True-SaveDateQuestion]
  dict({
    'saveDateQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'DateQuestion',
        'id': 'RGF0ZVF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_question[true-True-SaveFilesQuestion]
  dict({
    'saveFilesQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'FilesQuestion',
        'id': 'RmlsZXNRdWVzdGlvbjplbnZpcm9ubWVudGFsLXRlbg==',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_question[true-True-SaveFloatQuestion]
  dict({
    'saveFloatQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'FloatQuestion',
        'id': 'RmxvYXRRdWVzdGlvbjplbnZpcm9ubWVudGFsLXRlbg==',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_question[true-True-SaveIntegerQuestion]
  dict({
    'saveIntegerQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'IntegerQuestion',
        'id': 'SW50ZWdlclF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_question[true-True-SaveTextQuestion]
  dict({
    'saveTextQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'TextQuestion',
        'id': 'VGV4dFF1ZXN0aW9uOmVudmlyb25tZW50YWwtdGVu',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_question[true-True-SaveTextareaQuestion]
  dict({
    'saveTextareaQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'TextareaQuestion',
        'id': 'VGV4dGFyZWFRdWVzdGlvbjplbnZpcm9ubWVudGFsLXRlbg==',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
# name: test_save_static_question[static]
  dict({
    'saveStaticQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'StaticQuestion',
        'id': 'U3RhdGljUXVlc3Rpb246ZW52aXJvbm1lbnRhbC10ZW4=',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'slug': 'environmental-ten',
        'staticContent': '''
          Station story first. Team suggest traditional boy above. Argue move appear catch toward help wind.
          Kid avoid player relationship to range whose. Draw free property consider.
        ''',
      }),
    }),
  })
# ---
# name: test_save_table_question[table]
  dict({
    'saveTableQuestion': dict({
      'clientMutationId': 'testid',
      'question': dict({
        '__typename': 'TableQuestion',
        'hintText': 'test',
        'id': 'VGFibGVRdWVzdGlvbjplbnZpcm9ubWVudGFsLXRlbg==',
        'label': 'Bonnie Moreno',
        'meta': dict({
        }),
        'rowForm': dict({
          'slug': 'eight-traditional',
        }),
        'slug': 'environmental-ten',
      }),
    }),
  })
# ---
