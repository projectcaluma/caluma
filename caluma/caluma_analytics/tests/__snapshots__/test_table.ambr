# serializer version: 1
# name: test_add_field[created_at.quarter-False]
  dict({
    'saveAnalyticsField': dict({
      'analyticsField': dict({
        'table': dict({
          'fields': dict({
            'edges': list([
              dict({
                'node': dict({
                  'alias': 'some_alias',
                  'dataSource': 'created_at.quarter',
                }),
              }),
            ]),
          }),
          'name': 'Bonnie Moreno',
        }),
      }),
      'clientMutationId': None,
    }),
  })
# ---
# name: test_add_field[invalid_field-True]
  dict({
    'saveAnalyticsField': None,
  })
# ---
# name: test_add_field[meta.foobar-False]
  dict({
    'saveAnalyticsField': dict({
      'analyticsField': dict({
        'table': dict({
          'fields': dict({
            'edges': list([
              dict({
                'node': dict({
                  'alias': 'some_alias',
                  'dataSource': 'meta.foobar',
                }),
              }),
            ]),
          }),
          'name': 'Bonnie Moreno',
        }),
      }),
      'clientMutationId': None,
    }),
  })
# ---
# name: test_add_field_validations[created_at.quarter-quarter-None-None]
  dict({
    'saveAnalyticsField': dict({
      'analyticsField': dict({
        'table': dict({
          'fields': dict({
            'edges': list([
              dict({
                'node': dict({
                  'alias': 'quarter',
                  'dataSource': 'created_at.quarter',
                }),
              }),
              dict({
                'node': dict({
                  'alias': 'existing',
                  'dataSource': 'meta.foobar',
                }),
              }),
            ]),
          }),
          'name': 'Bonnie Moreno',
        }),
      }),
      'clientMutationId': None,
    }),
  })
# ---
# name: test_add_field_validations[invalid_field-foo-Specified data source 'invalid_field' is not available-dataSource]
  dict({
    'saveAnalyticsField': None,
  })
# ---
# name: test_add_field_validations[meta.baz-foobar-None-None]
  dict({
    'saveAnalyticsField': dict({
      'analyticsField': dict({
        'table': dict({
          'fields': dict({
            'edges': list([
              dict({
                'node': dict({
                  'alias': 'foobar',
                  'dataSource': 'meta.baz',
                }),
              }),
              dict({
                'node': dict({
                  'alias': 'existing',
                  'dataSource': 'meta.foobar',
                }),
              }),
            ]),
          }),
          'name': 'Bonnie Moreno',
        }),
      }),
      'clientMutationId': None,
    }),
  })
# ---
# name: test_add_field_validations[meta.foobar-existing-duplicate key value violates unique constraint "unique_alias"-alias]
  dict({
    'saveAnalyticsField': None,
  })
# ---
# name: test_add_field_validations[meta.foobar-existing-must make a unique set-alias]
  dict({
    'saveAnalyticsField': None,
  })
# ---
# name: test_add_field_validations[meta.foobar-foobar-duplicate key value violates unique constraint "unique_data_source"-dataSource]
  dict({
    'saveAnalyticsField': None,
  })
# ---
# name: test_add_field_validations[meta.foobar-foobar-must make a unique set-dataSource]
  dict({
    'saveAnalyticsField': None,
  })
# ---
# name: test_available_fields[None-None]
  dict({
    'analyticsTable': dict({
      'availableFields': dict({
        'edges': list([
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y2FzZQ==',
              'isLeaf': False,
              'label': 'Case',
              'sourcePath': 'case',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y2xvc2VkX2F0',
              'isLeaf': False,
              'label': 'closed_at',
              'sourcePath': 'closed_at',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdA==',
              'isLeaf': False,
              'label': 'created_at',
              'sourcePath': 'created_at',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6aWQ=',
              'isLeaf': True,
              'label': 'id',
              'sourcePath': 'id',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6bWV0YQ==',
              'isLeaf': False,
              'label': 'Meta',
              'sourcePath': 'meta',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6c3RhdHVz',
              'isLeaf': True,
              'label': 'status',
              'sourcePath': 'status',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6dGFza19pZA==',
              'isLeaf': True,
              'label': 'task_id',
              'sourcePath': 'task_id',
            }),
          }),
        ]),
      }),
    }),
  })
# ---
# name: test_available_fields[created_at-1]
  dict({
    'analyticsTable': dict({
      'availableFields': dict({
        'edges': list([
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdC5tb250aA==',
              'isLeaf': True,
              'label': 'month',
              'sourcePath': 'created_at.month',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdC5xdWFydGVy',
              'isLeaf': True,
              'label': 'quarter',
              'sourcePath': 'created_at.quarter',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdC53ZWVrZGF5',
              'isLeaf': True,
              'label': 'weekday',
              'sourcePath': 'created_at.weekday',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdC55ZWFy',
              'isLeaf': True,
              'label': 'year',
              'sourcePath': 'created_at.year',
            }),
          }),
        ]),
      }),
    }),
  })
# ---
# name: test_available_fields[created_at-2]
  dict({
    'analyticsTable': dict({
      'availableFields': dict({
        'edges': list([
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdC5tb250aA==',
              'isLeaf': True,
              'label': 'month',
              'sourcePath': 'created_at.month',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdC5xdWFydGVy',
              'isLeaf': True,
              'label': 'quarter',
              'sourcePath': 'created_at.quarter',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdC53ZWVrZGF5',
              'isLeaf': True,
              'label': 'weekday',
              'sourcePath': 'created_at.weekday',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdC55ZWFy',
              'isLeaf': True,
              'label': 'year',
              'sourcePath': 'created_at.year',
            }),
          }),
        ]),
      }),
    }),
  })
# ---
# name: test_available_fields[created_at.year-1]
  dict({
    'analyticsTable': dict({
      'availableFields': dict({
        'edges': list([
        ]),
      }),
    }),
  })
# ---
# name: test_available_fields[meta-1]
  dict({
    'analyticsTable': dict({
      'availableFields': dict({
        'edges': list([
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6bWV0YS5mb29iYXI=',
              'isLeaf': True,
              'label': "Key 'foobar'",
              'sourcePath': 'meta.foobar',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6bWV0YS50ZXN0LWtleQ==',
              'isLeaf': True,
              'label': "Key 'test-key'",
              'sourcePath': 'meta.test-key',
            }),
          }),
        ]),
      }),
    }),
  })
# ---
# name: test_create_table
  dict({
    'saveAnalyticsTable': dict({
      'analyticsTable': dict({
        'availableFields': dict({
          'edges': list([
            dict({
              'node': dict({
                'isLeaf': False,
                'label': 'closed_at',
                'sourcePath': 'closed_at',
              }),
            }),
            dict({
              'node': dict({
                'isLeaf': False,
                'label': 'created_at',
                'sourcePath': 'created_at',
              }),
            }),
            dict({
              'node': dict({
                'isLeaf': False,
                'label': 'document[*]',
                'sourcePath': 'document[*]',
              }),
            }),
            dict({
              'node': dict({
                'isLeaf': True,
                'label': 'id',
                'sourcePath': 'id',
              }),
            }),
            dict({
              'node': dict({
                'isLeaf': False,
                'label': 'Meta',
                'sourcePath': 'meta',
              }),
            }),
            dict({
              'node': dict({
                'isLeaf': True,
                'label': 'status',
                'sourcePath': 'status',
              }),
            }),
          ]),
        }),
        'name': 'Test table thingy',
      }),
    }),
  })
# ---
# name: test_full_field_list[False]
  list([
    'closed_at',
    'closed_at.month',
    'closed_at.quarter',
    'closed_at.weekday',
    'closed_at.year',
    'created_at',
    'created_at.month',
    'created_at.quarter',
    'created_at.weekday',
    'created_at.year',
    'document[*]',
    'document[*].caluma_form',
    'document[*].caluma_form.name',
    'document[*].caluma_form.name.de',
    'document[*].caluma_form.name.en',
    'document[*].caluma_form.name.fr',
    'document[*].caluma_form.slug',
    'document[*].column',
    'document[*].form',
    'document[*].form.sub_question',
    'document[*].sub_question',
    'document[*].top_question',
    'document[top_form]',
    'document[top_form].caluma_form',
    'document[top_form].caluma_form.name',
    'document[top_form].caluma_form.name.de',
    'document[top_form].caluma_form.name.en',
    'document[top_form].caluma_form.name.fr',
    'document[top_form].caluma_form.slug',
    'document[top_form].form',
    'document[top_form].form.sub_question',
    'document[top_form].top_question',
    'id',
    'meta',
    'meta.foobar',
    'meta.test-key',
    'status',
    'workitem[baby-room-note,first]',
    'workitem[baby-room-note,first].closed_at',
    'workitem[baby-room-note,first].closed_at.month',
    'workitem[baby-room-note,first].closed_at.quarter',
    'workitem[baby-room-note,first].closed_at.weekday',
    'workitem[baby-room-note,first].closed_at.year',
    'workitem[baby-room-note,first].created_at',
    'workitem[baby-room-note,first].created_at.month',
    'workitem[baby-room-note,first].created_at.quarter',
    'workitem[baby-room-note,first].created_at.weekday',
    'workitem[baby-room-note,first].created_at.year',
    'workitem[baby-room-note,first].deadline',
    'workitem[baby-room-note,first].deadline.month',
    'workitem[baby-room-note,first].deadline.quarter',
    'workitem[baby-room-note,first].deadline.weekday',
    'workitem[baby-room-note,first].deadline.year',
    'workitem[baby-room-note,first].document[might-parent-fund]',
    'workitem[baby-room-note,first].document[might-parent-fund].caluma_form',
    'workitem[baby-room-note,first].document[might-parent-fund].caluma_form.name',
    'workitem[baby-room-note,first].document[might-parent-fund].caluma_form.name.de',
    'workitem[baby-room-note,first].document[might-parent-fund].caluma_form.name.en',
    'workitem[baby-room-note,first].document[might-parent-fund].caluma_form.name.fr',
    'workitem[baby-room-note,first].document[might-parent-fund].caluma_form.slug',
    'workitem[baby-room-note,first].document_form',
    'workitem[baby-room-note,first].document_form.name',
    'workitem[baby-room-note,first].document_form.name.de',
    'workitem[baby-room-note,first].document_form.name.en',
    'workitem[baby-room-note,first].document_form.name.fr',
    'workitem[baby-room-note,first].document_form.slug',
    'workitem[baby-room-note,first].meta',
    'workitem[baby-room-note,first].meta.foobar',
    'workitem[baby-room-note,first].meta.test-key',
    'workitem[baby-room-note,first].name',
    'workitem[baby-room-note,first].status',
    'workitem[baby-room-note,firstclosed]',
    'workitem[baby-room-note,firstclosed].closed_at',
    'workitem[baby-room-note,firstclosed].closed_at.month',
    'workitem[baby-room-note,firstclosed].closed_at.quarter',
    'workitem[baby-room-note,firstclosed].closed_at.weekday',
    'workitem[baby-room-note,firstclosed].closed_at.year',
    'workitem[baby-room-note,firstclosed].created_at',
    'workitem[baby-room-note,firstclosed].created_at.month',
    'workitem[baby-room-note,firstclosed].created_at.quarter',
    'workitem[baby-room-note,firstclosed].created_at.weekday',
    'workitem[baby-room-note,firstclosed].created_at.year',
    'workitem[baby-room-note,firstclosed].deadline',
    'workitem[baby-room-note,firstclosed].deadline.month',
    'workitem[baby-room-note,firstclosed].deadline.quarter',
    'workitem[baby-room-note,firstclosed].deadline.weekday',
    'workitem[baby-room-note,firstclosed].deadline.year',
    'workitem[baby-room-note,firstclosed].document[might-parent-fund]',
    'workitem[baby-room-note,firstclosed].document[might-parent-fund].caluma_form',
    'workitem[baby-room-note,firstclosed].document[might-parent-fund].caluma_form.name',
    'workitem[baby-room-note,firstclosed].document[might-parent-fund].caluma_form.name.de',
    'workitem[baby-room-note,firstclosed].document[might-parent-fund].caluma_form.name.en',
    'workitem[baby-room-note,firstclosed].document[might-parent-fund].caluma_form.name.fr',
    'workitem[baby-room-note,firstclosed].document[might-parent-fund].caluma_form.slug',
    'workitem[baby-room-note,firstclosed].document_form',
    'workitem[baby-room-note,firstclosed].document_form.name',
    'workitem[baby-room-note,firstclosed].document_form.name.de',
    'workitem[baby-room-note,firstclosed].document_form.name.en',
    'workitem[baby-room-note,firstclosed].document_form.name.fr',
    'workitem[baby-room-note,firstclosed].document_form.slug',
    'workitem[baby-room-note,firstclosed].meta',
    'workitem[baby-room-note,firstclosed].meta.foobar',
    'workitem[baby-room-note,firstclosed].meta.test-key',
    'workitem[baby-room-note,firstclosed].name',
    'workitem[baby-room-note,firstclosed].status',
    'workitem[baby-room-note,last]',
    'workitem[baby-room-note,last].closed_at',
    'workitem[baby-room-note,last].closed_at.month',
    'workitem[baby-room-note,last].closed_at.quarter',
    'workitem[baby-room-note,last].closed_at.weekday',
    'workitem[baby-room-note,last].closed_at.year',
    'workitem[baby-room-note,last].created_at',
    'workitem[baby-room-note,last].created_at.month',
    'workitem[baby-room-note,last].created_at.quarter',
    'workitem[baby-room-note,last].created_at.weekday',
    'workitem[baby-room-note,last].created_at.year',
    'workitem[baby-room-note,last].deadline',
    'workitem[baby-room-note,last].deadline.month',
    'workitem[baby-room-note,last].deadline.quarter',
    'workitem[baby-room-note,last].deadline.weekday',
    'workitem[baby-room-note,last].deadline.year',
    'workitem[baby-room-note,last].document[might-parent-fund]',
    'workitem[baby-room-note,last].document[might-parent-fund].caluma_form',
    'workitem[baby-room-note,last].document[might-parent-fund].caluma_form.name',
    'workitem[baby-room-note,last].document[might-parent-fund].caluma_form.name.de',
    'workitem[baby-room-note,last].document[might-parent-fund].caluma_form.name.en',
    'workitem[baby-room-note,last].document[might-parent-fund].caluma_form.name.fr',
    'workitem[baby-room-note,last].document[might-parent-fund].caluma_form.slug',
    'workitem[baby-room-note,last].document_form',
    'workitem[baby-room-note,last].document_form.name',
    'workitem[baby-room-note,last].document_form.name.de',
    'workitem[baby-room-note,last].document_form.name.en',
    'workitem[baby-room-note,last].document_form.name.fr',
    'workitem[baby-room-note,last].document_form.slug',
    'workitem[baby-room-note,last].meta',
    'workitem[baby-room-note,last].meta.foobar',
    'workitem[baby-room-note,last].meta.test-key',
    'workitem[baby-room-note,last].name',
    'workitem[baby-room-note,last].status',
    'workitem[baby-room-note,lastclosed]',
    'workitem[baby-room-note,lastclosed].closed_at',
    'workitem[baby-room-note,lastclosed].closed_at.month',
    'workitem[baby-room-note,lastclosed].closed_at.quarter',
    'workitem[baby-room-note,lastclosed].closed_at.weekday',
    'workitem[baby-room-note,lastclosed].closed_at.year',
    'workitem[baby-room-note,lastclosed].created_at',
    'workitem[baby-room-note,lastclosed].created_at.month',
    'workitem[baby-room-note,lastclosed].created_at.quarter',
    'workitem[baby-room-note,lastclosed].created_at.weekday',
    'workitem[baby-room-note,lastclosed].created_at.year',
    'workitem[baby-room-note,lastclosed].deadline',
    'workitem[baby-room-note,lastclosed].deadline.month',
    'workitem[baby-room-note,lastclosed].deadline.quarter',
    'workitem[baby-room-note,lastclosed].deadline.weekday',
    'workitem[baby-room-note,lastclosed].deadline.year',
    'workitem[baby-room-note,lastclosed].document[might-parent-fund]',
    'workitem[baby-room-note,lastclosed].document[might-parent-fund].caluma_form',
    'workitem[baby-room-note,lastclosed].document[might-parent-fund].caluma_form.name',
    'workitem[baby-room-note,lastclosed].document[might-parent-fund].caluma_form.name.de',
    'workitem[baby-room-note,lastclosed].document[might-parent-fund].caluma_form.name.en',
    'workitem[baby-room-note,lastclosed].document[might-parent-fund].caluma_form.name.fr',
    'workitem[baby-room-note,lastclosed].document[might-parent-fund].caluma_form.slug',
    'workitem[baby-room-note,lastclosed].document_form',
    'workitem[baby-room-note,lastclosed].document_form.name',
    'workitem[baby-room-note,lastclosed].document_form.name.de',
    'workitem[baby-room-note,lastclosed].document_form.name.en',
    'workitem[baby-room-note,lastclosed].document_form.name.fr',
    'workitem[baby-room-note,lastclosed].document_form.slug',
    'workitem[baby-room-note,lastclosed].meta',
    'workitem[baby-room-note,lastclosed].meta.foobar',
    'workitem[baby-room-note,lastclosed].meta.test-key',
    'workitem[baby-room-note,lastclosed].name',
    'workitem[baby-room-note,lastclosed].status',
  ])
# ---
# name: test_full_field_list[True]
  dict({
    'analyticsTable': dict({
      'availableFields': dict({
        'edges': list([
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1ttaWdodC1wYXJlbnQtZnVuZF0=',
              'isLeaf': False,
              'label': 'answers[might-parent-fund]',
              'sourcePath': 'answers[might-parent-fund]',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1ttaWdodC1wYXJlbnQtZnVuZF0uY2FsdW1hX2Zvcm0=',
              'isLeaf': False,
              'label': 'caluma_form',
              'sourcePath': 'answers[might-parent-fund].caluma_form',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1ttaWdodC1wYXJlbnQtZnVuZF0uY2FsdW1hX2Zvcm0ubmFtZQ==',
              'isLeaf': False,
              'label': 'name',
              'sourcePath': 'answers[might-parent-fund].caluma_form.name',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1ttaWdodC1wYXJlbnQtZnVuZF0uY2FsdW1hX2Zvcm0ubmFtZS5kZQ==',
              'isLeaf': True,
              'label': 'de',
              'sourcePath': 'answers[might-parent-fund].caluma_form.name.de',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1ttaWdodC1wYXJlbnQtZnVuZF0uY2FsdW1hX2Zvcm0ubmFtZS5lbg==',
              'isLeaf': True,
              'label': 'en',
              'sourcePath': 'answers[might-parent-fund].caluma_form.name.en',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1ttaWdodC1wYXJlbnQtZnVuZF0uY2FsdW1hX2Zvcm0ubmFtZS5mcg==',
              'isLeaf': True,
              'label': 'fr',
              'sourcePath': 'answers[might-parent-fund].caluma_form.name.fr',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1ttaWdodC1wYXJlbnQtZnVuZF0uY2FsdW1hX2Zvcm0uc2x1Zw==',
              'isLeaf': True,
              'label': 'slug',
              'sourcePath': 'answers[might-parent-fund].caluma_form.slug',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tyb3dfZm9ybV0=',
              'isLeaf': False,
              'label': 'answers[row_form]',
              'sourcePath': 'answers[row_form]',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tyb3dfZm9ybV0uY2FsdW1hX2Zvcm0=',
              'isLeaf': False,
              'label': 'caluma_form',
              'sourcePath': 'answers[row_form].caluma_form',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tyb3dfZm9ybV0uY2FsdW1hX2Zvcm0ubmFtZQ==',
              'isLeaf': False,
              'label': 'name',
              'sourcePath': 'answers[row_form].caluma_form.name',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tyb3dfZm9ybV0uY2FsdW1hX2Zvcm0ubmFtZS5kZQ==',
              'isLeaf': True,
              'label': 'de',
              'sourcePath': 'answers[row_form].caluma_form.name.de',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tyb3dfZm9ybV0uY2FsdW1hX2Zvcm0ubmFtZS5lbg==',
              'isLeaf': True,
              'label': 'en',
              'sourcePath': 'answers[row_form].caluma_form.name.en',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tyb3dfZm9ybV0uY2FsdW1hX2Zvcm0ubmFtZS5mcg==',
              'isLeaf': True,
              'label': 'fr',
              'sourcePath': 'answers[row_form].caluma_form.name.fr',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tyb3dfZm9ybV0uY2FsdW1hX2Zvcm0uc2x1Zw==',
              'isLeaf': True,
              'label': 'slug',
              'sourcePath': 'answers[row_form].caluma_form.slug',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tyb3dfZm9ybV0uY29sdW1u',
              'isLeaf': True,
              'label': 'column',
              'sourcePath': 'answers[row_form].column',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWJfZm9ybV0=',
              'isLeaf': False,
              'label': 'answers[sub_form]',
              'sourcePath': 'answers[sub_form]',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWJfZm9ybV0uY2FsdW1hX2Zvcm0=',
              'isLeaf': False,
              'label': 'caluma_form',
              'sourcePath': 'answers[sub_form].caluma_form',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWJfZm9ybV0uY2FsdW1hX2Zvcm0ubmFtZQ==',
              'isLeaf': False,
              'label': 'name',
              'sourcePath': 'answers[sub_form].caluma_form.name',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWJfZm9ybV0uY2FsdW1hX2Zvcm0ubmFtZS5kZQ==',
              'isLeaf': True,
              'label': 'de',
              'sourcePath': 'answers[sub_form].caluma_form.name.de',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWJfZm9ybV0uY2FsdW1hX2Zvcm0ubmFtZS5lbg==',
              'isLeaf': True,
              'label': 'en',
              'sourcePath': 'answers[sub_form].caluma_form.name.en',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWJfZm9ybV0uY2FsdW1hX2Zvcm0ubmFtZS5mcg==',
              'isLeaf': True,
              'label': 'fr',
              'sourcePath': 'answers[sub_form].caluma_form.name.fr',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWJfZm9ybV0uY2FsdW1hX2Zvcm0uc2x1Zw==',
              'isLeaf': True,
              'label': 'slug',
              'sourcePath': 'answers[sub_form].caluma_form.slug',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWJfZm9ybV0uc3ViX3F1ZXN0aW9u',
              'isLeaf': True,
              'label': 'sub_question',
              'sourcePath': 'answers[sub_form].sub_question',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWdnZXN0LWFkdWx0LWFsbG93XQ==',
              'isLeaf': False,
              'label': 'answers[suggest-adult-allow]',
              'sourcePath': 'answers[suggest-adult-allow]',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWdnZXN0LWFkdWx0LWFsbG93XS5jYWx1bWFfZm9ybQ==',
              'isLeaf': False,
              'label': 'caluma_form',
              'sourcePath': 'answers[suggest-adult-allow].caluma_form',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWdnZXN0LWFkdWx0LWFsbG93XS5jYWx1bWFfZm9ybS5uYW1l',
              'isLeaf': False,
              'label': 'name',
              'sourcePath': 'answers[suggest-adult-allow].caluma_form.name',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWdnZXN0LWFkdWx0LWFsbG93XS5jYWx1bWFfZm9ybS5uYW1lLmRl',
              'isLeaf': True,
              'label': 'de',
              'sourcePath': 'answers[suggest-adult-allow].caluma_form.name.de',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWdnZXN0LWFkdWx0LWFsbG93XS5jYWx1bWFfZm9ybS5uYW1lLmVu',
              'isLeaf': True,
              'label': 'en',
              'sourcePath': 'answers[suggest-adult-allow].caluma_form.name.en',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWdnZXN0LWFkdWx0LWFsbG93XS5jYWx1bWFfZm9ybS5uYW1lLmZy',
              'isLeaf': True,
              'label': 'fr',
              'sourcePath': 'answers[suggest-adult-allow].caluma_form.name.fr',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1tzdWdnZXN0LWFkdWx0LWFsbG93XS5jYWx1bWFfZm9ybS5zbHVn',
              'isLeaf': True,
              'label': 'slug',
              'sourcePath': 'answers[suggest-adult-allow].caluma_form.slug',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1t0b3BfZm9ybV0=',
              'isLeaf': False,
              'label': 'answers[top_form]',
              'sourcePath': 'answers[top_form]',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1t0b3BfZm9ybV0uY2FsdW1hX2Zvcm0=',
              'isLeaf': False,
              'label': 'caluma_form',
              'sourcePath': 'answers[top_form].caluma_form',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1t0b3BfZm9ybV0uY2FsdW1hX2Zvcm0ubmFtZQ==',
              'isLeaf': False,
              'label': 'name',
              'sourcePath': 'answers[top_form].caluma_form.name',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1t0b3BfZm9ybV0uY2FsdW1hX2Zvcm0ubmFtZS5kZQ==',
              'isLeaf': True,
              'label': 'de',
              'sourcePath': 'answers[top_form].caluma_form.name.de',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1t0b3BfZm9ybV0uY2FsdW1hX2Zvcm0ubmFtZS5lbg==',
              'isLeaf': True,
              'label': 'en',
              'sourcePath': 'answers[top_form].caluma_form.name.en',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1t0b3BfZm9ybV0uY2FsdW1hX2Zvcm0ubmFtZS5mcg==',
              'isLeaf': True,
              'label': 'fr',
              'sourcePath': 'answers[top_form].caluma_form.name.fr',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1t0b3BfZm9ybV0uY2FsdW1hX2Zvcm0uc2x1Zw==',
              'isLeaf': True,
              'label': 'slug',
              'sourcePath': 'answers[top_form].caluma_form.slug',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1t0b3BfZm9ybV0uZm9ybQ==',
              'isLeaf': False,
              'label': 'form',
              'sourcePath': 'answers[top_form].form',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1t0b3BfZm9ybV0uZm9ybS5zdWJfcXVlc3Rpb24=',
              'isLeaf': True,
              'label': 'sub_question',
              'sourcePath': 'answers[top_form].form.sub_question',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6YW5zd2Vyc1t0b3BfZm9ybV0udG9wX3F1ZXN0aW9u',
              'isLeaf': True,
              'label': 'top_question',
              'sourcePath': 'answers[top_form].top_question',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y2FsdW1hX2Zvcm0=',
              'isLeaf': False,
              'label': 'caluma_form',
              'sourcePath': 'caluma_form',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y2FsdW1hX2Zvcm0ubmFtZQ==',
              'isLeaf': False,
              'label': 'name',
              'sourcePath': 'caluma_form.name',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y2FsdW1hX2Zvcm0ubmFtZS5kZQ==',
              'isLeaf': True,
              'label': 'de',
              'sourcePath': 'caluma_form.name.de',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y2FsdW1hX2Zvcm0ubmFtZS5lbg==',
              'isLeaf': True,
              'label': 'en',
              'sourcePath': 'caluma_form.name.en',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y2FsdW1hX2Zvcm0ubmFtZS5mcg==',
              'isLeaf': True,
              'label': 'fr',
              'sourcePath': 'caluma_form.name.fr',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y2FsdW1hX2Zvcm0uc2x1Zw==',
              'isLeaf': True,
              'label': 'slug',
              'sourcePath': 'caluma_form.slug',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdA==',
              'isLeaf': False,
              'label': 'created_at',
              'sourcePath': 'created_at',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdC5tb250aA==',
              'isLeaf': True,
              'label': 'month',
              'sourcePath': 'created_at.month',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdC5xdWFydGVy',
              'isLeaf': True,
              'label': 'quarter',
              'sourcePath': 'created_at.quarter',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdC53ZWVrZGF5',
              'isLeaf': True,
              'label': 'weekday',
              'sourcePath': 'created_at.weekday',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6Y3JlYXRlZF9hdC55ZWFy',
              'isLeaf': True,
              'label': 'year',
              'sourcePath': 'created_at.year',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6aWQ=',
              'isLeaf': True,
              'label': 'id',
              'sourcePath': 'id',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6bWV0YQ==',
              'isLeaf': False,
              'label': 'Meta',
              'sourcePath': 'meta',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6bWV0YS5mb29iYXI=',
              'isLeaf': True,
              'label': "Key 'foobar'",
              'sourcePath': 'meta.foobar',
            }),
          }),
          dict({
            'node': dict({
              'id': 'QXZhaWxhYmxlRmllbGQ6bWV0YS50ZXN0LWtleQ==',
              'isLeaf': True,
              'label': "Key 'test-key'",
              'sourcePath': 'meta.test-key',
            }),
          }),
        ]),
      }),
    }),
  })
# ---
# name: test_update_field
  dict({
    'saveAnalyticsField': dict({
      'analyticsField': dict({
        'table': dict({
          'fields': dict({
            'edges': list([
              dict({
                'node': dict({
                  'alias': 'existing_new_alias',
                  'dataSource': 'meta.foobar',
                }),
              }),
            ]),
          }),
          'name': 'Bonnie Moreno',
        }),
      }),
      'clientMutationId': None,
    }),
  })
# ---
